# -*- coding: utf-8 -*-
"""
ApexFlow Master Build Script
This script automates the entire build process for ApexFlow, including:
1. Generating the PyInstaller .spec file with the correct version.
2. Generating the NSIS .nsi installer script with the correct version.
3. Running PyInstaller to compile the application.
4. Running NSIS to create the Windows installer.
"""

import os
import sys
import subprocess
import glob
from pathlib import Path

# Ensure the script can find the 'config' module
# Add the parent directory of 'build_scripts' to the Python path
script_dir = Path(__file__).parent
project_root = script_dir.parent
sys.path.append(str(project_root))

try:
    from config import version as app_version
except ImportError as e:
    print(f"[ERROR] Failed to import version info: {e}")
    print("Please ensure the script is run from the 'build_scripts' directory or the project root is in the path.")
    sys.exit(1)

# --- MASTER CONFIGURATION ---

# Version Info (remove 'v' prefix for numerical versions)
VERSION = app_version.VERSION.lstrip('v')
APP_NAME = app_version.APP_NAME
COMPANY_NAME = app_version.APP_AUTHOR_EN

# Paths
# The script is in 'build_scripts', so we go up one level for the project root
DIST_DIR = script_dir / "dist"
BUILD_DIR = script_dir / "build"
SPEC_FILE_PATH = script_dir / "ApexFlow_Simple.spec"
NSI_FILE_PATH = script_dir / "build_installer.nsi"
NSIS_EXE_PATH = "C:\\Program Files (x86)\\NSIS\\makensis.exe"

# --- PyInstaller Spec Configuration ---

spec_data_files = [
    ('../assets', 'assets'),
    ('../assets/icons', 'assets/icons'),
    ('../assets/icons/default', 'assets/icons/default'),
    ('../assets/menu_icons', 'assets/menu_icons'),
    ('../assets/screenshots', 'assets/screenshots'),
    ('../assets/sounds', 'assets/sounds'),
    ('../data', 'data'),
    ('../src', 'src'),
    ('../docs', 'docs'),
    ('../config', 'config'),
]

spec_hidden_imports = [
    # PySide6 modules
    'PySide6.QtCore', 'PySide6.QtGui', 'PySide6.QtWidgets',
    'PySide6.QtPrintSupport', 'PySide6.QtSvg', 'PySide6.QtNetwork',
    
    # PDF processing modules
    'pypdf', 'pypdf.PdfReader', 'pypdf.PdfWriter', 'fitz',
    
    # Image processing modules
    'PIL', 'PIL.Image', 'PIL.ImageDraw', 'PIL.ImageFont',
    
    # Arabic text support
    'arabic_reshaper', 'bidi', 'bidi.algorithm',
    
    # System modules
    'psutil', 'win32api', 'win32print', 'win32gui', 'pywintypes',
    
    # Standard library modules
    'json', 'pathlib', 'logging', 'threading', 'queue', 'tkinter',
    'io', 'tempfile', 'os', 'sys', 'importlib',
    
    # Project modules
    'src', 'src.core', 'src.managers', 'src.ui', 'src.utils',
    'src.ui.pages', 'src.ui.widgets', 'src.ui.settings',
    'managers', 'utils', 'ui', 'core',
    
    # Additional modules that might be missed
    'pkg_resources', 'setuptools',
]

spec_excludes = [
    'matplotlib', 'numpy', 'scipy', 'pandas', 'jupyter',
    'IPython', 'notebook', 'tornado', 'zmq', 'PyQt6',
]

# --- NSIS Script Template ---

nsi_template = f"""; ApexFlow NSIS Installer Script
; Generated by ApexFlow Master Build Script

!include "MUI2.nsh"
!include "LogicLib.nsh"

; =================================================================
; General Information
; =================================================================

!define APP_NAME "{APP_NAME}"
!define COMPANY_NAME "{COMPANY_NAME}"
!define VERSION "{VERSION}"
!define EXE_NAME "{APP_NAME}.exe"
!define UNINSTALL_KEY "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${{APP_NAME}}"

Name "${{APP_NAME}} ${{VERSION}}"
OutFile "ApexFlow_Setup_${{VERSION}}.exe"
InstallDir "$PROGRAMFILES64\\${{APP_NAME}}"
InstallDirRegKey HKLM "Software\\${{APP_NAME}}" "InstallDir"
RequestExecutionLevel admin

; =================================================================
; Modern UI Configuration
; =================================================================

!define MUI_ICON "..\\assets\\icons\\{APP_NAME}.ico"
!define MUI_UNICON "..\\assets\\icons\\{APP_NAME}.ico"

; Pages
!insertmacro MUI_PAGE_WELCOME
Page custom prevVersionInfoPage
!insertmacro MUI_PAGE_LICENSE "..\\docs\\LICENSE.txt"
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!define MUI_FINISHPAGE_RUN "$INSTDIR\\${{EXE_NAME}}"
!insertmacro MUI_PAGE_FINISH

; Uninstaller Pages
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

; Language
!insertmacro MUI_LANGUAGE "English"

; =================================================================
; Custom Page: Previous Version Information
; =================================================================

Var prevVersionInfoDialog
Var prevVersionInfoText

Function prevVersionInfoPage
  !insertmacro MUI_HEADER_TEXT "Updating {APP_NAME}" "Information about the update process"
  nsDialogs::Create 1018
  Pop $prevVersionInfoDialog
  ${{If}} $prevVersionInfoDialog == error
    Abort
  ${{EndIf}}
  ${{NSD_CreateLabel}} 0 0 100% 120u "This installer will check for and automatically uninstall any previous versions of {APP_NAME} before installing the new version.$\\r$\\n$\\r$\\nThis process ensures a clean installation and prevents potential conflicts between versions.$\\r$\\n$\\r$\\nYour personal settings and data will be preserved during this process."
  Pop $prevVersionInfoText
  nsDialogs::Show
FunctionEnd

; =================================================================
; Initialization: Check for and uninstall previous versions
; =================================================================

Function .onInit
  ReadRegStr $R0 HKLM "${{UNINSTALL_KEY}}" "UninstallString"
  ${{If}} $R0 != ""
    DetailPrint "Previous version found. Attempting to uninstall..."
    ExecWait '"$R0" /S'
    DetailPrint "Uninstallation attempt finished."
  ${{EndIf}}
FunctionEnd

; =================================================================
; Installation Sections
; =================================================================

Section "Main Application (Required)" SecApp
  SectionIn RO
  SetOutPath "$INSTDIR"
  DetailPrint "Installing main application files..."
  File /r "dist\\{APP_NAME}\\*.*"
  DetailPrint "Installing application resources and configuration files..."
  WriteRegStr HKLM "Software\\${{APP_NAME}}" "InstallDir" "$INSTDIR"
  WriteRegStr HKLM "Software\\${{APP_NAME}}" "Version" "${{VERSION}}"
  WriteUninstaller "$INSTDIR\\Uninstall.exe"
  WriteRegStr HKLM "${{UNINSTALL_KEY}}" "DisplayName" "${{APP_NAME}} - PDF Processing Tool"
  WriteRegStr HKLM "${{UNINSTALL_KEY}}" "UninstallString" '"$INSTDIR\\Uninstall.exe"'
  WriteRegStr HKLM "${{UNINSTALL_KEY}}" "QuietUninstallString" '"$INSTDIR\\Uninstall.exe" /S'
  WriteRegStr HKLM "${{UNINSTALL_KEY}}" "DisplayVersion" "${{VERSION}}"
  WriteRegStr HKLM "${{UNINSTALL_KEY}}" "Publisher" "${{COMPANY_NAME}}"
  WriteRegStr HKLM "${{UNINSTALL_KEY}}" "DisplayIcon" "$INSTDIR\\${{EXE_NAME}}"
SectionEnd

Section "Start Menu Shortcut" SecStartMenu
  CreateDirectory "$SMPROGRAMS\\${{APP_NAME}}"
  CreateShortCut "$SMPROGRAMS\\${{APP_NAME}}\\{{APP_NAME}}.lnk" "$INSTDIR\\${{EXE_NAME}}"
  CreateShortCut "$SMPROGRAMS\\${{APP_NAME}}\\Uninstall.lnk" "$INSTDIR\\Uninstall.exe"
SectionEnd

Section "Desktop Shortcut" SecDesktop
  CreateShortCut "$DESKTOP\\${{APP_NAME}}.lnk" "$INSTDIR\\${{EXE_NAME}}"
SectionEnd

; =================================================================
; Uninstaller Section
; =================================================================

Section "Uninstall"
  RMDir /r "$INSTDIR"
  Delete "$SMPROGRAMS\\${{APP_NAME}}\\*.*"
  RMDir "$SMPROGRAMS\\${{APP_NAME}}"
  Delete "$DESKTOP\\${{APP_NAME}}.lnk"
  DeleteRegKey HKLM "${{UNINSTALL_KEY}}"
  DeleteRegKey HKLM "Software\\${{APP_NAME}}"
SectionEnd
"""

def generate_spec_file():
    """Generates the PyInstaller .spec file from configuration."""
    print("[INFO] Generating PyInstaller .spec file...")
    
    spec_content = f"""# -*- mode: python ; coding: utf-8 -*-
# This file is auto-generated by build_master.py. DO NOT EDIT.

import os

# Application information
APP_NAME = "{APP_NAME}"
VERSION = "{VERSION}"

# Define required files and folders
data_files = {spec_data_files!r}

# Required hidden imports
hidden_imports = {spec_hidden_imports!r}

# Additional data files for icons and resources (using glob patterns correctly)
import glob
additional_data = []

# Add individual icon files
for pattern in ['../assets/icons/*.ico', '../assets/icons/*.png', '../assets/icons/*.svg']:
    for file_path in glob.glob(pattern):
        additional_data.append((file_path, 'assets/icons'))

for file_path in glob.glob('../assets/icons/default/*.svg'):
    additional_data.append((file_path, 'assets/icons/default'))

for file_path in glob.glob('../assets/menu_icons/*.svg'):
    additional_data.append((file_path, 'assets/menu_icons'))

for pattern in ['../assets/*.png', '../assets/*.svg']:
    for file_path in glob.glob(pattern):
        additional_data.append((file_path, 'assets'))

# Combine data files
all_data_files = data_files + additional_data

# Excluded modules
excludes = {spec_excludes!r}

# Analyze files
a = Analysis(
    ['../main.py'],
    pathex=[],
    binaries=[],
    datas=all_data_files,
    hiddenimports=hidden_imports,
    hookspath=['.'],  # Use current directory for hooks
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=excludes,
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
    optimize=0,
)

# Create PYZ file
pyz = PYZ(a.pure, a.zipped_data, cipher=None)

# Create executable file
exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name=APP_NAME,
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=f'../assets/icons/{APP_NAME}.ico',
    # Ensure all icon files are included
    add_data=[
        ('../assets/icons/*.ico', 'assets/icons'),
        ('../assets/icons/*.png', 'assets/icons'),
        ('../assets/icons/*.svg', 'assets/icons'),
        ('../assets/images/*.png', 'assets/images'),
        ('../assets/images/*.jpg', 'assets/images'),
        ('../assets/images/*.jpeg', 'assets/images'),
    ],
    version_file=None,
    # Add runtime hooks for better library detection
    runtime_hooks=['../config/rthooks/pyi_rth_pyside6.py'] if os.path.exists('../config/rthooks/pyi_rth_pyside6.py') else [],
    # Add additional options for better compatibility
    uac_admin=True,
    uac_uiaccess=False,
    # Ensure all resources are included
    collect_all=['PySide6'],
)

# Collect all files
coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name=APP_NAME,
)
"""
    try:
        SPEC_FILE_PATH.write_text(spec_content, encoding='utf-8')
        print(f"[SUCCESS] Generated {SPEC_FILE_PATH}")
    except IOError as e:
        print(f"[ERROR] Failed to write .spec file: {e}")
        sys.exit(1)

def generate_nsi_script():
    """Generates the NSIS .nsi script from the template."""
    print("[INFO] Generating NSIS .nsi script...")
    try:
        NSI_FILE_PATH.write_text(nsi_template, encoding='utf-8')
        print(f"[SUCCESS] Generated {NSI_FILE_PATH}")
    except IOError as e:
        print(f"[ERROR] Failed to write .nsi file: {e}")
        sys.exit(1)

def run_pyinstaller():
    """Runs the PyInstaller build process."""
    print("\\n" + "="*50)
    print("--- PART 1: Compiling the Python Application ---")
    print("="*50)
    
    command = [
        sys.executable,
        "-m", "PyInstaller",
        str(SPEC_FILE_PATH),
        f"--distpath={DIST_DIR}",
        f"--workpath={BUILD_DIR}",
        "--clean",
        "--noconfirm"
    ]
    
    try:
        # We are in build_scripts, so chdir is not needed
        subprocess.run(command, check=True)
        print("[SUCCESS] PyInstaller completed successfully.")
        print(f"--> Output located in: {DIST_DIR}")
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] PyInstaller failed with exit code {e.returncode}")
        sys.exit(1)
    except FileNotFoundError:
        print("[ERROR] PyInstaller not found. Make sure it's installed (`pip install pyinstaller`).")
        sys.exit(1)

def run_nsis():
    """Runs the NSIS installer build process."""
    print("\\n" + "="*50)
    print("--- PART 2: Building the NSIS Installer ---")
    print("="*50)

    if not Path(NSIS_EXE_PATH).exists():
        print(f"[ERROR] NSIS executable not found at: {NSIS_EXE_PATH}")
        print("Please install NSIS and/or correct the NSIS_EXE_PATH in this script.")
        sys.exit(1)
        
    command = f'"{NSIS_EXE_PATH}" "{str(NSI_FILE_PATH)}"'
    
    try:
        # We are in build_scripts, so chdir is not needed
        subprocess.run(command, check=True, shell=True)
        print("[SUCCESS] NSIS installer created successfully.")
        print(f"Installer located at: {script_dir / f'{APP_NAME}_Setup_{VERSION}.exe'}")
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] NSIS makensis.exe failed with exit code {e.returncode}")
        sys.exit(1)
    except FileNotFoundError:
        print(f"[ERROR] NSIS executable not found at the specified path.")
        sys.exit(1)

def check_prerequisites():
    """Check if all required files and directories exist."""
    print("[INFO] Checking prerequisites...")
    
    required_files = [
        project_root / "main.py",
        project_root / "config" / "version.py",
        project_root / "assets" / "icons" / f"{APP_NAME}.ico",
        project_root / "docs" / "LICENSE.txt",
    ]
    
    required_dirs = [
        project_root / "src",
        project_root / "assets",
        project_root / "config",
        project_root / "data",
    ]
    
    missing_items = []
    
    for file_path in required_files:
        if not file_path.exists():
            missing_items.append(f"File: {file_path}")
    
    for dir_path in required_dirs:
        if not dir_path.exists():
            missing_items.append(f"Directory: {dir_path}")
    
    if missing_items:
        print("[ERROR] Missing required files/directories:")
        for item in missing_items:
            print(f"  - {item}")
        sys.exit(1)
    
    print("[SUCCESS] All prerequisites found.")

def main():
    """Main function to run the entire build process."""
    print("="*50)
    print(f"  ApexFlow Master Build Script")
    print(f"  Version: {VERSION}")
    print(f"  Project Root: {project_root}")
    print("="*50 + "\\n")

    # Step 0: Check prerequisites
    check_prerequisites()
    
    # Step 1: Generate configuration files
    generate_spec_file()
    generate_nsi_script()
    
    # Step 2: Run PyInstaller
    run_pyinstaller()
    
    # Step 3: Run NSIS
    run_nsis()
    
    print("\\n" + "="*50)
    print("  BUILD PROCESS COMPLETED SUCCESSFULLY!")
    print(f"  Installer: {script_dir / f'{APP_NAME}_Setup_{VERSION}.exe'}")
    print("="*50)

if __name__ == "__main__":
    main()
